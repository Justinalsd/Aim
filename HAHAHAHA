getgenv().Config = {
	Invite = "Phantom forces by@dementia",
	Version = "1.0x",
}

getgenv().luaguardvars = {
	DiscordName = "https://discord.gg/Qcsh7HkB",
}

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/drillygzzly/Other/main/1"))()

library:init() -- Initalizes Library Do Not Delete This

local Window = library.NewWindow({
	title = "Phantom forces by@dementia",
	size = UDim2.new(0, 525, 0, 650)
})

library:SendNotification("Phantom forces Hack!! by@dementia", 5, Color3.new(255, 0, 0))

--// Defined

local Camera = workspace.CurrentCamera
local Players = workspace.Players
local Mouse = game.Players.LocalPlayer:GetMouse()
local UserInputService = game:GetService("UserInputService")

local Storage = {
    Index = {
        Head = 7,
        Torso = 6,
    },
    ESP = {
        Boxes = {},
        Tracers = {},
        Chams = {},
    },
    Other = {
        ViewportSize = Camera.ViewportSize
    },
}

local FOVCircle = Drawing.new("Circle")
do --// Drawing object properties

    do --// Circle

        FOVCircle.Transparency = 1
        FOVCircle.Visible = false
        FOVCircle.Color = Color3.fromRGB(255, 255, 255)
        FOVCircle.Radius = 0
        
    end
    
end

local Functions = {
    Normal = {},
    ESP = {},
}

local FeatureTable = {
    Combat = {
        SilentAim = false,
        TeamCheck = false,
        Hitpart = 7, --// 6 = Torso, 7 = Head
    },
    Visuals = {
        Box = {Enabled = false, Color = Color3.fromRGB(255, 255, 255)},
        Tracers = {Enabled = false, Color = Color3.fromRGB(255, 255, 255)},
        Chams = {Enabled = false, FillColor = Color3.fromRGB(255, 255, 255), OutlineColor = Color3.fromRGB(255, 255, 255), VisibleOnly = false, Transparency = .5},

        TeamCheck = false,
        UseTeamColor = false, --// Team colors dont apply to chams btw
    },
    Misc = {
        Bhop = true,
        Watermark = true,
    },
}

--Tabs

local tabs = {
    AimbotTab = Window:AddTab("Aimbot"),
    VisualTab = Window:AddTab("Visuals"),
    MiscTab = Window:AddTab("Misc"),
	Settings = library:CreateSettingsTab(Window),
}

local sections = {
	AimbotTab = tabs.AimbotTab:AddSection("Aimbot", 1),
    VisualTab = tabs.VisualTab:AddSection("Visuals", 1),
    MiscTab = tabs.MiscTab:AddSection("Misc", 1),
}

--AimbotTab

sections.AimbotTab:AddToggle({ --Silent Aim
	enabled = true,
	text = "Silent Aim",
	flag = "Toggle_1",
	tooltip = "Silent Aim",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    FeatureTable.Combat.SilentAim = Value
	end
})
sections.AimbotTab:AddToggle({ --TeamCheck
	enabled = true,
	text = "TeamCheck",
	flag = "Toggle_2",
	tooltip = "TeamCheck",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    FeatureTable.Combat.TeamCheck = Value
	end
})
sections.AimbotTab:AddToggle({ --Visualise Range
	enabled = true,
	text = "Visualise Range",
	flag = "Toggle_3",
	tooltip = "Visualise Range",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    FOVCircle.Visible = Value
	end
})
sections.AimbotTab:AddList({ --Hitpart
	enabled = true,
	text = "Hitpart",
	flag = "List_1",
	multi = false,
	tooltip = "Tooltip1",
    risky = false,
    dragging = false,
    focused = false,
	value = "Head",
	values = {
		"Head",
		"Torso"
	},
	callback = function(Value)
	    FeatureTable.Combat.Hitpart = Storage.Index[Value]
	end
})
sections.AimbotTab:AddSlider({ --Range
	text = "Range", 
	flag = 'Slider_1', 
	suffix = "", 
	value = 0,
	min = 0, 
	max = 1000,
	increment = 1,
	tooltip = "Range",
	risky = false,
	callback = function(Value) 
		FOVCircle.Radius = Value
	end
})

--Visuals Tab

sections.VisualTab:AddToggle({ --Box
	enabled = true,
	text = "Box",
	flag = "Toggle_1",
	tooltip = "Box",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    FeatureTable.Visuals.Box.Enabled = Value
	end
})
sections.VisualTab:AddToggle({ --Tracer
	enabled = true,
	text = "Tracer",
	flag = "Toggle_1",
	tooltip = "Tracer",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    FeatureTable.Visuals.Tracers.Enabled = Value
	end
})
sections.VisualTab:AddToggle({ --Chams
	enabled = true,
	text = "Chams",
	flag = "Toggle_1",
	tooltip = "Chams",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    FeatureTable.Visuals.Chams.Enabled = Value
	end
})
sections.VisualTab:AddToggle({ --Team Check
	enabled = true,
	text = "Team Check",
	flag = "Toggle_1",
	tooltip = "Team Check",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    FeatureTable.Visuals.TeamCheck = Value
	end
})
sections.VisualTab:AddToggle({ --Team Colors
	enabled = true,
	text = "Team Colors",
	flag = "Toggle_1",
	tooltip = "Team Colors",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    FeatureTable.Visuals.UseTeamColor = Value
	end
})
sections.VisualTab:AddColor({ --Box Color
    enabled = true,
    text = "Box Color",
    flag = "Color_1",
    tooltip = "Box Color",
    color = Color3.new(255, 255, 255),
    trans = 0,
    open = false,
    callback = function(Value)
        FeatureTable.Visuals.Box.Color = Value
    end
})
sections.VisualTab:AddColor({ --Tracer Color
    enabled = true,
    text = "Tracer Color",
    flag = "Color_1",
    tooltip = "Tracer Color",
    color = Color3.new(255, 255, 255),
    trans = 0,
    open = false,
    callback = function(Value)
        FeatureTable.Visuals.Tracers.Color = Value
    end
})
sections.VisualTab:AddColor({ --Fill Color
    enabled = true,
    text = "Fill Color",
    flag = "Color_1",
    tooltip = "Fill Color",
    color = Color3.new(255, 255, 255),
    trans = 0,
    open = false,
    callback = function(Value)
        FeatureTable.Visuals.Chams.FillColor = Value
    end
})
sections.VisualTab:AddColor({ --Outline Color
    enabled = true,
    text = "Outline Color",
    flag = "Color_1",
    tooltip = "Outline Color",
    color = Color3.new(255, 255, 255),
    trans = 0,
    open = false,
    callback = function(Value)
        FeatureTable.Visuals.Chams.OutlineColor = Value
    end
})
sections.VisualTab:AddSlider({ --transparency
	text = "Cham transparency", 
	flag = 'Slider_1', 
	suffix = "", 
	value = 0,
	min = 0, 
	max = 1,
	increment = 0.1,
	tooltip = "Cham transparency",
	risky = false,
	callback = function(Value) 
		FeatureTable.Visuals.Chams.Transparency = Value
	end
})
sections.MiscTab:AddToggle({ --Watermark
	enabled = true,
	text = "Watermark",
	flag = "Toggle_1",
	tooltip = "Watermark",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    Watermark.Enabled = Value
	end
})
sections.MiscTab:AddToggle({ --BHop
	enabled = true,
	text = "BHop",
	flag = "Toggle_1",
	tooltip = "BHop",
	risky = true, -- turns text to red and sets label to risky
	callback = function(Value)
	    FeatureTable.Misc.Bhop = Value
	end
})
do --// Logic
    do --// Functions
        do --// Regular
            function Functions.Normal:GetTeam(Player)
                if Player ~= nil and Player.Parent ~= nil and Player:FindFirstChildOfClass("Folder") then
                    local Helmet = Player:FindFirstChildWhichIsA("Folder"):FindFirstChildOfClass("MeshPart")
                    if Helmet then
                        if Helmet.BrickColor == BrickColor.new("Black") then
                            return game.Teams.Phantoms
                        else
                            return game.Teams.Ghosts
                        end
                    end
                end
            end
    
            function Functions.Normal:GetPlayers()
                local PlayerList = {}
                for i,Teams in Players:GetChildren() do
                    for i,Players in Teams:GetChildren() do
                        table.insert(PlayerList, Players)
                    end
                end
                return PlayerList
            end
    
            function Functions.Normal:Measure(Origin, End)
                return (Origin - End).Magnitude
            end

            function Functions.Normal:GetGun()
                for i,Viewmodel in Camera:GetChildren() do
                    if Viewmodel:IsA("Model") and not Viewmodel.Name:find("Arm") then
                        return Viewmodel
                    end
                end
                return nil
            end
        end

        do --// Aimbot
            
            function Functions.Normal:getClosestPlayer()
                local Player = nil
                local Distance = math.huge
                for i,Players in Functions.Normal:GetPlayers() do
                    if Players ~= nil then
                        local Hitpart = Players:GetChildren()[FeatureTable.Combat.Hitpart]
                        local Screen = Camera:WorldToViewportPoint(Hitpart.Position)
                        local MeasureDistance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Screen.X, Screen.Y)).Magnitude
                        if MeasureDistance < Distance and MeasureDistance <= FOVCircle.Radius*1.25 then --// not how  you actually get an accurate circle but i dont care lol...
                            Player = Players
                            Distance = MeasureDistance
                        end
                    end
                end
                return Player
            end

        end

        do --// ESP
            function Functions.ESP:Create(Player)
    
                if not table.find(Storage.ESP.Boxes, Player) then
    
                    local Box = Drawing.new("Square")
                    Box.Color = Color3.fromRGB(255,255,255)
                    Box.Transparency = 1
                    Box.Visible = true
                    Box.Thickness = 1
                    Box.ZIndex = 2
                    
                    do --// Table insert
    
                        table.insert(Storage.ESP.Boxes, Box)
                        table.insert(Storage.ESP.Boxes, Player)
    
                    end
            
                end
                if not table.find(Storage.ESP.Tracers, Player) then
    
                    local Tracer = Drawing.new("Line")
                    Tracer.Transparency = 1
                    Tracer.Visible = true
                    Tracer.Color = Color3.fromRGB(255,255,255)
                    
                    do --// Table insert
    
                        table.insert(Storage.ESP.Tracers, Tracer)
                        table.insert(Storage.ESP.Tracers, Player)
    
                    end
            
                end
    
            end

            function Functions.ESP:ClearTable(esps, esptable, index)
                for i = 1, #esps do
                    esps[i]:Destroy()
                end
                do --// Table clear
                    table.remove(esptable, index)
                    table.remove(esptable, index-1)
                end
            end
        end

    end

    do --// Loops

        task.spawn(function()
            while task.wait() do --// gl working with the dogshit code, skids :D

                do --// Combat

                    do --// Aimbot

                        if FeatureTable.Combat.SilentAim then
                            local Target = Functions.Normal:getClosestPlayer()
                            if Target ~= nil and (FeatureTable.Combat.TeamCheck and Functions.Normal:GetTeam(Target) ~= game.Players.LocalPlayer.Team or not FeatureTable.Combat.TeamCheck) then
                                local Hitpart = Target:GetChildren()[FeatureTable.Combat.Hitpart]
                                local Gun = Functions.Normal:GetGun()
                        
                                if Hitpart and Gun then
                                    for i, Stuff in pairs(Gun:GetChildren()) do
                                        local Joints = Stuff:GetJoints()
                                        if Stuff.Name:find("SightMark") or Stuff.Name:find("FlameSUP") or Stuff.Name:find("Flame") then
                                            Joints[1].C0 = Joints[1].Part0.CFrame:ToObjectSpace(CFrame.lookAt(Joints[1].Part1.Position, Hitpart.Position))
                                        end
                                    end
                                end
                            end
                        end
                        

                    end

                end

                do --// Visuals
                    for i,Players in Functions.Normal:GetPlayers() do --// bro... so p1000
                        Functions.ESP:Create(Players)
                    end

                    do --// Box ESP

                        for i,Player in Storage.ESP.Boxes do --// Box logic (obviously)
                            if typeof(Player) == "Instance" then

                                local Box = Storage.ESP.Boxes[i-1]
                
                                if FeatureTable.Visuals.Box.Enabled and Player:IsDescendantOf(workspace) then
                                    local Torso = Player:GetChildren()[6]
                                    if Torso ~= nil then
                                        local Position, OnScreen = Camera:WorldToViewportPoint(Torso.Position) --// Convert to screen pos since we're rendering the boxes on the screen (duh)

                                        local Team = Functions.Normal:GetTeam(Player)
                                        local TeamColor = Team.TeamColor
                
                                        if OnScreen and FeatureTable.Visuals.TeamCheck and tostring(Team) ~= game.Players.LocalPlayer.Team.Name or not FeatureTable.Visuals.TeamCheck then
                
                                            local PosX = Position.X - (Box.Size.X / 2)
                                            local PosY = Position.Y - (Box.Size.Y / 2)
                                            local Scale = 1000/(Camera.CFrame.Position - Torso.Position).Magnitude*80/Camera.FieldOfView --// Very simple box distance scale
                                            
                                            Box.Position = Vector2.new(PosX, PosY)
                                            Box.Size = Vector2.new(2 * Scale, 3 * Scale)
                                            Box.Visible = true
                                            
                                            if FeatureTable.Visuals.UseTeamColor then --// 😭
                                                if tostring(TeamColor) == "Bright blue" then
                                                    Box.Color = Color3.fromRGB(0, 162, 255)
                                                elseif tostring(TeamColor) == "Bright orange" then
                                                    Box.Color = Color3.fromRGB(255, 162, 0)
                                                end
                                            else
                                                Box.Color = FeatureTable.Visuals.Box.Color
                                            end
                
                                        else
                
                                            Functions.ESP:ClearTable({Box}, Storage.ESP.Boxes, i)
                
                                        end
                
                                    else
                
                                        Functions.ESP:ClearTable({Box}, Storage.ESP.Boxes, i)
                
                                    end
                                else
                
                                    Functions.ESP:ClearTable({Box}, Storage.ESP.Boxes, i)
                
                                end
                            end
                        end
                    end
                    do --// Tracer ESP
                        for i,Player in Storage.ESP.Tracers do --// Tracer logic (obviously once again)
                            if typeof(Player) == "Instance" then

                                local Tracer = Storage.ESP.Tracers[i-1]
                
                                if FeatureTable.Visuals.Tracers.Enabled and Player:IsDescendantOf(workspace) then
                                    local Torso = Player:GetChildren()[6]
                                    if Torso ~= nil then
                                        local Position, OnScreen = Camera:WorldToViewportPoint(Torso.Position) --// Convert to screen pos since we're rendering the boxes on the screen (duh)

                                        local Team = Functions.Normal:GetTeam(Player)
                                        local TeamColor = Team.TeamColor
                
                                        if OnScreen and FeatureTable.Visuals.TeamCheck and tostring(Team) ~= game.Players.LocalPlayer.Team.Name or not FeatureTable.Visuals.TeamCheck then
                                            
                                            Tracer.From = Vector2.new(Storage.Other.ViewportSize.X/2,Storage.Other.ViewportSize.Y/2) --// Set origin to center of screen cuz screen size divided by 2 is center
                                            Tracer.To = Vector2.new(Position.X, Position.Y)
                                            
                                            if FeatureTable.Visuals.UseTeamColor then --// emm
                                                if tostring(TeamColor) == "Bright blue" then
                                                    Tracer.Color = Color3.fromRGB(0, 162, 255)
                                                elseif tostring(TeamColor) == "Bright orange" then
                                                    Tracer.Color = Color3.fromRGB(255, 162, 0)
                                                end
                                            else
                                                Tracer.Color = FeatureTable.Visuals.Tracers.Color
                                            end
                
                                        else
                
                                            Functions.ESP:ClearTable({Tracer}, Storage.ESP.Tracers, i)
                
                                        end
                
                                    else
                
                                        Functions.ESP:ClearTable({Tracer}, Storage.ESP.Tracers, i)
                
                                    end
                                else
                
                                    Functions.ESP:ClearTable({Tracer}, Storage.ESP.Tracers, i)
                
                                end
                            end
                        end
                        
                    end
                    do --// Cham ESP
                        for i, Player in Functions.Normal:GetPlayers() do
                            if Player ~= nil then
                        
                                local Highlight = Player:FindFirstChildOfClass("Highlight")
                                local Team = Functions.Normal:GetTeam(Player)
                        
                                if FeatureTable.Visuals.Chams.Enabled and (FeatureTable.Visuals.TeamCheck and tostring(Team) ~= game.Players.LocalPlayer.Team.Name or not FeatureTable.Visuals.TeamCheck) then
                                    
                                    if not Highlight then
                                        Highlight = Instance.new("Highlight", Player)
                                    end
                        
                                    Highlight.Enabled = true
                                    Highlight.Adornee = Player
                                    Highlight.FillColor = FeatureTable.Visuals.Chams.FillColor
                                    Highlight.OutlineColor = FeatureTable.Visuals.Chams.OutlineColor
                                    Highlight.FillTransparency = FeatureTable.Visuals.Chams.Transparency
                                    Highlight.OutlineTransparency = FeatureTable.Visuals.Chams.Transparency
                                    Highlight.DepthMode = FeatureTable.Visuals.Chams.VisibleOnly and Enum.HighlightDepthMode.Occluded or Enum.HighlightDepthMode.AlwaysOnTop
              
                                else
                                    if Highlight then
                                        Highlight:Destroy()
                                    end
                                end
								
                            end
                        end
                        
                    end

                end

                do --// Misc

                    do --// Bhop
                        if FeatureTable.Misc.Bhop and UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                            local LocalPlayer = workspace.Ignore:FindFirstChild("RefPlayer")
                            if LocalPlayer then
                                local Humanoid = LocalPlayer:FindFirstChildOfClass("Humanoid")
                                if Humanoid then
                                    Humanoid.Jump = true
                                end
                            end
                        end
                    end
                    
                end
                do --// Extra
                    FOVCircle.Position = Vector2.new(Storage.Other.ViewportSize.X/2, Storage.Other.ViewportSize.Y/2)
                end

            end
        end)

    end

    do --// Connections
        
        Camera:GetPropertyChangedSignal("ViewportSize"):Connect(function(Value)
            Storage.Other.ViewportSize = Value
        end)
        
    end

    --// Made by @dementia enjoyer 😁

end
